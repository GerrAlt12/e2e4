define(["require", "exports", 'lodash', './common/parseHelper'], function (require, exports, _, parseHelper_1) {
    "use strict";
    var FilterManager = (function () {
        function FilterManager(target) {
            this.defaultsApplied = false;
            this.appliedFiltersMap = new Map();
            this.registerFilterTarget(target);
        }
        FilterManager.registerFilter = function (targetType, propertyConfig) {
            var typeConfigs = FilterManager.filterPropertiesMap.has(targetType) ? FilterManager.filterPropertiesMap.get(targetType) : new Array();
            typeConfigs.push(propertyConfig);
            FilterManager.filterPropertiesMap.set(targetType, typeConfigs);
        };
        FilterManager.buildFilterValue = function (target, value, config) {
            if (config && config.serializeFormatter) {
                return config.serializeFormatter.call(target, value);
            }
            value = config && config.emptyIsNull ? value || null : value;
            if (value && value.toRequest) {
                return value.toRequest();
            }
            if (Array.isArray(value)) {
                var temp = [];
                for (var i = 0; i < value.length; i++) {
                    temp[i] = FilterManager.buildFilterValue(target, value[i], null);
                }
                return temp;
            }
            return value;
        };
        FilterManager.prototype.dispose = function () {
            this.appliedFiltersMap.clear();
            delete this.appliedFiltersMap;
        };
        FilterManager.prototype.resetValues = function () {
            this.appliedFiltersMap.forEach(function (targetConfig, target) {
                for (var i = 0; i < targetConfig.length; i++) {
                    var config = targetConfig[i];
                    var defaultValue = (typeof config.defaultValue === 'function') ? config.defaultValue.call(target) : config.defaultValue;
                    var clonedObject = _.cloneDeep({ defaultValue: defaultValue });
                    target[config.propertyName] = clonedObject.defaultValue;
                }
            });
        };
        FilterManager.prototype.parseParams = function (params) {
            var _this = this;
            this.appliedFiltersMap.forEach(function (targetConfig, target) {
                for (var i = 0; i < targetConfig.length; i++) {
                    var config = targetConfig[i];
                    if (false === _this.defaultsApplied && config.defaultValue === undefined) {
                        config.defaultValue = _.cloneDeep({ defaultValue: target[config.propertyName] }).defaultValue;
                    }
                    if (params && params[config.parameterName] !== undefined && false === config.ignoreOnAutoMap) {
                        var proposedVal = config.emptyIsNull ? params[config.parameterName] || null : params[config.parameterName];
                        proposedVal = config.coerce ? parseHelper_1.ParseHelper.coerceValue(proposedVal) : proposedVal;
                        target[config.propertyName] = config.parseFormatter ? config.parseFormatter.call(target, proposedVal, params) : proposedVal;
                    }
                }
            });
            this.defaultsApplied = true;
        };
        FilterManager.prototype.getRequestState = function (result) {
            result = result || {};
            this.appliedFiltersMap.forEach(function (targetConfig, target) {
                for (var i = 0; i < targetConfig.length; i++) {
                    var config = targetConfig[i];
                    var proposedVal = target[config.propertyName];
                    result[config.parameterName] = FilterManager.buildFilterValue(target, proposedVal, config);
                }
            });
            return result;
        };
        FilterManager.prototype.getPersistedState = function (result) {
            result = result || {};
            this.appliedFiltersMap.forEach(function (targetConfig, target) {
                for (var i = 0; i < targetConfig.length; i++) {
                    var config = targetConfig[i];
                    if (!config.persisted) {
                        continue;
                    }
                    var proposedVal = target[config.propertyName];
                    if (proposedVal && proposedVal.toRequest) {
                        proposedVal = proposedVal.toRequest();
                    }
                    result[config.parameterName] = config.serializeFormatter
                        ? config.serializeFormatter.call(target, proposedVal) : (config.emptyIsNull ? proposedVal || null : proposedVal);
                }
            });
            return result;
        };
        FilterManager.prototype.registerFilterTarget = function (target) {
            var targetConfig = this.appliedFiltersMap.has(target) ? this.appliedFiltersMap.get(target) : new Array();
            FilterManager.filterPropertiesMap.forEach(function (typeConfig, type) {
                if (target instanceof type) {
                    targetConfig = targetConfig.concat(_.cloneDeep(typeConfig));
                }
            });
            if (targetConfig.length > 0) {
                this.appliedFiltersMap.set(target, targetConfig);
            }
            else {
                this.appliedFiltersMap.delete(target);
            }
        };
        FilterManager.filterPropertiesMap = new Map();
        return FilterManager;
    }());
    exports.FilterManager = FilterManager;
});

//# sourceMappingURL=data:application/json;base64,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LFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUNoRSxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFDSCxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzFCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQ3JELENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzFDLENBQUM7UUFDTCxDQUFDO1FBdEdNLGlDQUFtQixHQUFHLElBQUksR0FBRyxFQUE0QixDQUFDO1FBMEdyRSxvQkFBQztJQUFELENBNUdBLEFBNEdDLElBQUE7SUE1R1kscUJBQWEsZ0JBNEd6QixDQUFBIiwiZmlsZSI6ImZpbHRlck1hbmFnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XHJcbmltcG9ydCB7RmlsdGVyQ29uZmlnfSBmcm9tICcuL2ZpbHRlckNvbmZpZyc7XHJcbmltcG9ydCB7UGFyc2VIZWxwZXJ9IGZyb20gJy4vY29tbW9uL3BhcnNlSGVscGVyJztcclxuaW1wb3J0IHtJRmlsdGVyTWFuYWdlcn0gZnJvbSAnLi9jb250cmFjdHMvSUZpbHRlck1hbmFnZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZpbHRlck1hbmFnZXIgaW1wbGVtZW50cyBJRmlsdGVyTWFuYWdlciB7XHJcblxyXG4gICAgc3RhdGljIGZpbHRlclByb3BlcnRpZXNNYXAgPSBuZXcgTWFwPGFueSwgQXJyYXk8RmlsdGVyQ29uZmlnPj4oKTtcclxuICAgIHN0YXRpYyByZWdpc3RlckZpbHRlcih0YXJnZXRUeXBlOiBPYmplY3QsIHByb3BlcnR5Q29uZmlnOiBGaWx0ZXJDb25maWcpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCB0eXBlQ29uZmlncyA9IEZpbHRlck1hbmFnZXIuZmlsdGVyUHJvcGVydGllc01hcC5oYXModGFyZ2V0VHlwZSkgPyBGaWx0ZXJNYW5hZ2VyLmZpbHRlclByb3BlcnRpZXNNYXAuZ2V0KHRhcmdldFR5cGUpIDogbmV3IEFycmF5PEZpbHRlckNvbmZpZz4oKTtcclxuICAgICAgICB0eXBlQ29uZmlncy5wdXNoKHByb3BlcnR5Q29uZmlnKTtcclxuICAgICAgICBGaWx0ZXJNYW5hZ2VyLmZpbHRlclByb3BlcnRpZXNNYXAuc2V0KHRhcmdldFR5cGUsIHR5cGVDb25maWdzKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYnVpbGRGaWx0ZXJWYWx1ZSh0YXJnZXQ6IE9iamVjdCwgdmFsdWU6IGFueSwgY29uZmlnOiBGaWx0ZXJDb25maWcpOiBPYmplY3Qge1xyXG4gICAgICAgIGlmIChjb25maWcgJiYgY29uZmlnLnNlcmlhbGl6ZUZvcm1hdHRlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gY29uZmlnLnNlcmlhbGl6ZUZvcm1hdHRlci5jYWxsKHRhcmdldCwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFsdWUgPSBjb25maWcgJiYgY29uZmlnLmVtcHR5SXNOdWxsID8gdmFsdWUgfHwgbnVsbCA6IHZhbHVlO1xyXG5cclxuICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWUudG9SZXF1ZXN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b1JlcXVlc3QoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGVtcFtpXSA9IEZpbHRlck1hbmFnZXIuYnVpbGRGaWx0ZXJWYWx1ZSh0YXJnZXQsIHZhbHVlW2ldLCBudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGVtcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZGVmYXVsdHNBcHBsaWVkID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIGFwcGxpZWRGaWx0ZXJzTWFwID0gbmV3IE1hcDxPYmplY3QsIEFycmF5PEZpbHRlckNvbmZpZz4+KCk7XHJcblxyXG4gICAgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmFwcGxpZWRGaWx0ZXJzTWFwLmNsZWFyKCk7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuYXBwbGllZEZpbHRlcnNNYXA7XHJcbiAgICB9XHJcbiAgICByZXNldFZhbHVlcygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmFwcGxpZWRGaWx0ZXJzTWFwLmZvckVhY2goKHRhcmdldENvbmZpZywgdGFyZ2V0KSA9PiB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFyZ2V0Q29uZmlnLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb25maWcgPSB0YXJnZXRDb25maWdbaV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSAodHlwZW9mIGNvbmZpZy5kZWZhdWx0VmFsdWUgPT09ICdmdW5jdGlvbicpID8gKGNvbmZpZy5kZWZhdWx0VmFsdWUgYXMgRnVuY3Rpb24pLmNhbGwodGFyZ2V0KSA6IGNvbmZpZy5kZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjbG9uZWRPYmplY3QgPSBfLmNsb25lRGVlcCh7IGRlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlIH0pO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0W2NvbmZpZy5wcm9wZXJ0eU5hbWVdID0gY2xvbmVkT2JqZWN0LmRlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcGFyc2VQYXJhbXMocGFyYW1zOiBPYmplY3QpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmFwcGxpZWRGaWx0ZXJzTWFwLmZvckVhY2goKHRhcmdldENvbmZpZywgdGFyZ2V0KSA9PiB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFyZ2V0Q29uZmlnLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb25maWcgPSB0YXJnZXRDb25maWdbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoZmFsc2UgPT09IHRoaXMuZGVmYXVsdHNBcHBsaWVkICYmIGNvbmZpZy5kZWZhdWx0VmFsdWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5kZWZhdWx0VmFsdWUgPSBfLmNsb25lRGVlcCh7IGRlZmF1bHRWYWx1ZTogdGFyZ2V0W2NvbmZpZy5wcm9wZXJ0eU5hbWVdIH0pLmRlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1zICYmIHBhcmFtc1tjb25maWcucGFyYW1ldGVyTmFtZV0gIT09IHVuZGVmaW5lZCAmJiBmYWxzZSA9PT0gY29uZmlnLmlnbm9yZU9uQXV0b01hcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwcm9wb3NlZFZhbCA9IGNvbmZpZy5lbXB0eUlzTnVsbCA/IHBhcmFtc1tjb25maWcucGFyYW1ldGVyTmFtZV0gfHwgbnVsbCA6IHBhcmFtc1tjb25maWcucGFyYW1ldGVyTmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcG9zZWRWYWwgPSBjb25maWcuY29lcmNlID8gUGFyc2VIZWxwZXIuY29lcmNlVmFsdWUocHJvcG9zZWRWYWwpIDogcHJvcG9zZWRWYWw7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2NvbmZpZy5wcm9wZXJ0eU5hbWVdID0gY29uZmlnLnBhcnNlRm9ybWF0dGVyID8gY29uZmlnLnBhcnNlRm9ybWF0dGVyLmNhbGwodGFyZ2V0LCBwcm9wb3NlZFZhbCwgcGFyYW1zKSA6IHByb3Bvc2VkVmFsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0c0FwcGxpZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgZ2V0UmVxdWVzdFN0YXRlKHJlc3VsdD86IE9iamVjdCk6IE9iamVjdCB7XHJcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0IHx8IHt9O1xyXG4gICAgICAgIHRoaXMuYXBwbGllZEZpbHRlcnNNYXAuZm9yRWFjaCgodGFyZ2V0Q29uZmlnLCB0YXJnZXQpID0+IHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YXJnZXRDb25maWcubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHRhcmdldENvbmZpZ1tpXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHByb3Bvc2VkVmFsID0gdGFyZ2V0W2NvbmZpZy5wcm9wZXJ0eU5hbWVdO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0W2NvbmZpZy5wYXJhbWV0ZXJOYW1lXSA9IEZpbHRlck1hbmFnZXIuYnVpbGRGaWx0ZXJWYWx1ZSh0YXJnZXQsIHByb3Bvc2VkVmFsLCBjb25maWcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIGdldFBlcnNpc3RlZFN0YXRlKHJlc3VsdD86IE9iamVjdCk6IE9iamVjdCB7XHJcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0IHx8IHt9O1xyXG4gICAgICAgIHRoaXMuYXBwbGllZEZpbHRlcnNNYXAuZm9yRWFjaCgodGFyZ2V0Q29uZmlnLCB0YXJnZXQpID0+IHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YXJnZXRDb25maWcubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHRhcmdldENvbmZpZ1tpXTtcclxuICAgICAgICAgICAgICAgIGlmICghY29uZmlnLnBlcnNpc3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV0IHByb3Bvc2VkVmFsID0gdGFyZ2V0W2NvbmZpZy5wcm9wZXJ0eU5hbWVdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHByb3Bvc2VkVmFsICYmIHByb3Bvc2VkVmFsLnRvUmVxdWVzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3Bvc2VkVmFsID0gcHJvcG9zZWRWYWwudG9SZXF1ZXN0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXN1bHRbY29uZmlnLnBhcmFtZXRlck5hbWVdID0gY29uZmlnLnNlcmlhbGl6ZUZvcm1hdHRlclxyXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlnLnNlcmlhbGl6ZUZvcm1hdHRlci5jYWxsKHRhcmdldCwgcHJvcG9zZWRWYWwpIDogKGNvbmZpZy5lbXB0eUlzTnVsbCA/IHByb3Bvc2VkVmFsIHx8IG51bGwgOiBwcm9wb3NlZFZhbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgcmVnaXN0ZXJGaWx0ZXJUYXJnZXQodGFyZ2V0OiBPYmplY3QpOiB2b2lkIHtcclxuICAgICAgICBsZXQgdGFyZ2V0Q29uZmlnID0gdGhpcy5hcHBsaWVkRmlsdGVyc01hcC5oYXModGFyZ2V0KSA/IHRoaXMuYXBwbGllZEZpbHRlcnNNYXAuZ2V0KHRhcmdldCkgOiBuZXcgQXJyYXk8RmlsdGVyQ29uZmlnPigpO1xyXG4gICAgICAgIEZpbHRlck1hbmFnZXIuZmlsdGVyUHJvcGVydGllc01hcC5mb3JFYWNoKCh0eXBlQ29uZmlnLCB0eXBlKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiB0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRDb25maWcgPSB0YXJnZXRDb25maWcuY29uY2F0KF8uY2xvbmVEZWVwKHR5cGVDb25maWcpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICh0YXJnZXRDb25maWcubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmFwcGxpZWRGaWx0ZXJzTWFwLnNldCh0YXJnZXQsIHRhcmdldENvbmZpZyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5hcHBsaWVkRmlsdGVyc01hcC5kZWxldGUodGFyZ2V0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdHJ1Y3Rvcih0YXJnZXQ6IE9iamVjdCkge1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJGaWx0ZXJUYXJnZXQodGFyZ2V0KTtcclxuICAgIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
