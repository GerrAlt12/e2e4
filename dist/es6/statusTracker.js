import { Status } from './common/status';
import { Defaults } from './common/defaults';
import { ProgressState } from './common/progressState';
export class StatusTracker {
    static get statusDisplayed() {
        return StatusTracker.status !== ProgressState.Done;
    }
    static get isActive() {
        return StatusTracker.statusDisplayed || StatusTracker.modalDisplayed;
    }
    static trackStatus(title) {
        const sid = setTimeout(() => {
            StatusTracker.status = ProgressState.Progress;
            const status = new Status(ProgressState.Progress, title);
            status.sid = sid;
            StatusTracker.statusList.push(status);
        }, Defaults.uiSettings.progressDelayInterval);
        return sid;
    }
    static resolveStatus(sid, status) {
        clearTimeout(sid);
        const current = StatusTracker.statusList.find(item => {
            return item.sid === sid;
        });
        if (current) {
            current.status = status;
        }
        setTimeout(() => {
            const undone = StatusTracker.statusList.find(item => {
                return item.status === ProgressState.Progress;
            });
            if (undone === undefined) {
                StatusTracker.statusList.length = 0;
                StatusTracker.status = ProgressState.Done;
            }
            else {
                for (let i = StatusTracker.statusList.length - 1; i >= 0; i--) {
                    if (StatusTracker.statusList[i].sid === sid) {
                        StatusTracker.statusList.splice(i, 1);
                    }
                }
            }
        }, Defaults.uiSettings.elementVisibilityInterval);
    }
    ;
}
StatusTracker.status = ProgressState.Done;
StatusTracker.modalDisplayed = false;
StatusTracker.statusList = new Array();

//# sourceMappingURL=data:application/json;base64,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OlsiaW1wb3J0IHtTdGF0dXN9IGZyb20gJy4vY29tbW9uL3N0YXR1cyc7XHJcbmltcG9ydCB7RGVmYXVsdHN9IGZyb20gJy4vY29tbW9uL2RlZmF1bHRzJztcclxuaW1wb3J0IHtQcm9ncmVzc1N0YXRlfSBmcm9tICcuL2NvbW1vbi9wcm9ncmVzc1N0YXRlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTdGF0dXNUcmFja2VyIHtcclxuICAgIHN0YXRpYyBzdGF0dXMgPSBQcm9ncmVzc1N0YXRlLkRvbmU7XHJcbiAgICBzdGF0aWMgbW9kYWxEaXNwbGF5ZWQgPSBmYWxzZTtcclxuICAgIHN0YXRpYyBzdGF0dXNMaXN0ID0gbmV3IEFycmF5PFN0YXR1cz4oKTtcclxuXHJcbiAgICBzdGF0aWMgZ2V0IHN0YXR1c0Rpc3BsYXllZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gU3RhdHVzVHJhY2tlci5zdGF0dXMgIT09IFByb2dyZXNzU3RhdGUuRG9uZTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBnZXQgaXNBY3RpdmUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIFN0YXR1c1RyYWNrZXIuc3RhdHVzRGlzcGxheWVkIHx8IFN0YXR1c1RyYWNrZXIubW9kYWxEaXNwbGF5ZWQ7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgdHJhY2tTdGF0dXModGl0bGU6IHN0cmluZyk6IG51bWJlciB7XHJcbiAgICAgICAgY29uc3Qgc2lkID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIFN0YXR1c1RyYWNrZXIuc3RhdHVzID0gUHJvZ3Jlc3NTdGF0ZS5Qcm9ncmVzcztcclxuICAgICAgICAgICAgY29uc3Qgc3RhdHVzID0gbmV3IFN0YXR1cyhQcm9ncmVzc1N0YXRlLlByb2dyZXNzLCB0aXRsZSk7XHJcbiAgICAgICAgICAgIHN0YXR1cy5zaWQgPSBzaWQ7XHJcbiAgICAgICAgICAgIFN0YXR1c1RyYWNrZXIuc3RhdHVzTGlzdC5wdXNoKHN0YXR1cyk7XHJcbiAgICAgICAgfSwgRGVmYXVsdHMudWlTZXR0aW5ncy5wcm9ncmVzc0RlbGF5SW50ZXJ2YWwpO1xyXG4gICAgICAgIHJldHVybiBzaWQ7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgcmVzb2x2ZVN0YXR1cyhzaWQ6IG51bWJlciwgc3RhdHVzOiBQcm9ncmVzc1N0YXRlKTogdm9pZCB7XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHNpZCk7XHJcbiAgICAgICAgY29uc3QgY3VycmVudCA9IFN0YXR1c1RyYWNrZXIuc3RhdHVzTGlzdC5maW5kKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gaXRlbS5zaWQgPT09IHNpZDtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICBjdXJyZW50LnN0YXR1cyA9IHN0YXR1cztcclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0VGltZW91dCgoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVuZG9uZSA9IFN0YXR1c1RyYWNrZXIuc3RhdHVzTGlzdC5maW5kKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uc3RhdHVzID09PSBQcm9ncmVzc1N0YXRlLlByb2dyZXNzO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKHVuZG9uZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBTdGF0dXNUcmFja2VyLnN0YXR1c0xpc3QubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgICAgIFN0YXR1c1RyYWNrZXIuc3RhdHVzID0gUHJvZ3Jlc3NTdGF0ZS5Eb25lO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IFN0YXR1c1RyYWNrZXIuc3RhdHVzTGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChTdGF0dXNUcmFja2VyLnN0YXR1c0xpc3RbaV0uc2lkID09PSBzaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU3RhdHVzVHJhY2tlci5zdGF0dXNMaXN0LnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBEZWZhdWx0cy51aVNldHRpbmdzLmVsZW1lbnRWaXNpYmlsaXR5SW50ZXJ2YWwpO1xyXG4gICAgfTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
