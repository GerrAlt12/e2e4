import { StatusModel } from './common/statusModel';
import { Defaults } from './common/defaults';
import { ProgressState } from './common/progressState';
import * as _ from 'lodash';
export class StatusTracker {
    static get statusDisplayed() {
        return StatusTracker.status !== ProgressState.Done;
    }
    static get isActive() {
        return StatusTracker.statusDisplayed || StatusTracker.modalDisplayed;
    }
    static trackStatus(title) {
        const sid = setTimeout(() => {
            StatusTracker.status = ProgressState.Progress;
            if (title) {
                const statusModel = new StatusModel(ProgressState.Progress, title);
                statusModel.sid = sid;
                StatusTracker.statusList.push(statusModel);
            }
        }, Defaults.uiSettings.progressDelayInterval);
        return sid;
    }
    static resolveStatus(sid, status) {
        if (sid) {
            clearTimeout(sid);
            const current = StatusTracker.statusList.find(item => {
                return item.sid === sid;
            });
            if (current) {
                current.status = status;
            }
        }
        setTimeout(() => {
            const undone = StatusTracker.statusList.find(item => {
                return item.status === ProgressState.Progress;
            });
            if (undone === undefined) {
                StatusTracker.statusList.length = 0;
                StatusTracker.status = ProgressState.Done;
            }
            else {
                _.remove(StatusTracker.statusList, item => {
                    return item.sid === sid;
                });
            }
        }, Defaults.uiSettings.elementVisibilityInterval);
    }
    ;
}
StatusTracker.status = ProgressState.Done;
StatusTracker.modalDisplayed = false;
StatusTracker.statusList = new Array();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0YXR1c1RyYWNrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxzQkFBc0I7T0FDekMsRUFBQyxRQUFRLEVBQUMsTUFBTSxtQkFBbUI7T0FDbkMsRUFBQyxhQUFhLEVBQUMsTUFBTSx3QkFBd0I7T0FDN0MsS0FBSyxDQUFDLE1BQU0sUUFBUTtBQUUzQjtJQUtJLFdBQVcsZUFBZTtRQUN0QixNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sS0FBSyxhQUFhLENBQUMsSUFBSSxDQUFDO0lBQ3ZELENBQUM7SUFDRCxXQUFXLFFBQVE7UUFDZixNQUFNLENBQUMsYUFBYSxDQUFDLGVBQWUsSUFBSSxhQUFhLENBQUMsY0FBYyxDQUFDO0lBQ3pFLENBQUM7SUFDRCxPQUFPLFdBQVcsQ0FBQyxLQUFhO1FBQzVCLE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQztZQUNuQixhQUFhLENBQUMsTUFBTSxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUM7WUFDOUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDUixNQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUNuRSxXQUFXLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztnQkFDdEIsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDL0MsQ0FBQztRQUNMLENBQUMsRUFBRSxRQUFRLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDOUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRCxPQUFPLGFBQWEsQ0FBQyxHQUFXLEVBQUUsTUFBcUI7UUFDbkQsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNOLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNsQixNQUFNLE9BQU8sR0FBRyxhQUFhLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJO2dCQUM5QyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUM7WUFDNUIsQ0FBQyxDQUFDLENBQUM7WUFDSCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUNWLE9BQU8sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1lBQzVCLENBQUM7UUFDTCxDQUFDO1FBQ0QsVUFBVSxDQUFDO1lBQ1AsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSTtnQkFDN0MsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssYUFBYSxDQUFDLFFBQVEsQ0FBQztZQUNsRCxDQUFDLENBQUMsQ0FBQztZQUNILEVBQUUsQ0FBQyxDQUFDLE1BQU0sS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUN2QixhQUFhLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7Z0JBQ3BDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQztZQUM5QyxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLElBQUk7b0JBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQztnQkFDNUIsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDO1FBQ0wsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxVQUFVLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUN0RCxDQUFDOztBQUNMLENBQUM7QUE3Q1Usb0JBQU0sR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDO0FBQzVCLDRCQUFjLEdBQUcsS0FBSyxDQUFDO0FBQ3ZCLHdCQUFVLEdBQUcsSUFBSSxLQUFLLEVBQWUsQ0EyQy9DIiwiZmlsZSI6InN0YXR1c1RyYWNrZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1N0YXR1c01vZGVsfSBmcm9tICcuL2NvbW1vbi9zdGF0dXNNb2RlbCc7XHJcbmltcG9ydCB7RGVmYXVsdHN9IGZyb20gJy4vY29tbW9uL2RlZmF1bHRzJztcclxuaW1wb3J0IHtQcm9ncmVzc1N0YXRlfSBmcm9tICcuL2NvbW1vbi9wcm9ncmVzc1N0YXRlJztcclxuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFN0YXR1c1RyYWNrZXIge1xyXG4gICAgc3RhdGljIHN0YXR1cyA9IFByb2dyZXNzU3RhdGUuRG9uZTtcclxuICAgIHN0YXRpYyBtb2RhbERpc3BsYXllZCA9IGZhbHNlO1xyXG4gICAgc3RhdGljIHN0YXR1c0xpc3QgPSBuZXcgQXJyYXk8U3RhdHVzTW9kZWw+KCk7XHJcblxyXG4gICAgc3RhdGljIGdldCBzdGF0dXNEaXNwbGF5ZWQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIFN0YXR1c1RyYWNrZXIuc3RhdHVzICE9PSBQcm9ncmVzc1N0YXRlLkRvbmU7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0IGlzQWN0aXZlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBTdGF0dXNUcmFja2VyLnN0YXR1c0Rpc3BsYXllZCB8fCBTdGF0dXNUcmFja2VyLm1vZGFsRGlzcGxheWVkO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIHRyYWNrU3RhdHVzKHRpdGxlOiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgICAgIGNvbnN0IHNpZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBTdGF0dXNUcmFja2VyLnN0YXR1cyA9IFByb2dyZXNzU3RhdGUuUHJvZ3Jlc3M7XHJcbiAgICAgICAgICAgIGlmICh0aXRsZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdHVzTW9kZWwgPSBuZXcgU3RhdHVzTW9kZWwoUHJvZ3Jlc3NTdGF0ZS5Qcm9ncmVzcywgdGl0bGUpO1xyXG4gICAgICAgICAgICAgICAgc3RhdHVzTW9kZWwuc2lkID0gc2lkO1xyXG4gICAgICAgICAgICAgICAgU3RhdHVzVHJhY2tlci5zdGF0dXNMaXN0LnB1c2goc3RhdHVzTW9kZWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgRGVmYXVsdHMudWlTZXR0aW5ncy5wcm9ncmVzc0RlbGF5SW50ZXJ2YWwpO1xyXG4gICAgICAgIHJldHVybiBzaWQ7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgcmVzb2x2ZVN0YXR1cyhzaWQ6IG51bWJlciwgc3RhdHVzOiBQcm9ncmVzc1N0YXRlKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHNpZCkge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoc2lkKTtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IFN0YXR1c1RyYWNrZXIuc3RhdHVzTGlzdC5maW5kKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uc2lkID09PSBzaWQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudC5zdGF0dXMgPSBzdGF0dXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0VGltZW91dCgoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVuZG9uZSA9IFN0YXR1c1RyYWNrZXIuc3RhdHVzTGlzdC5maW5kKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uc3RhdHVzID09PSBQcm9ncmVzc1N0YXRlLlByb2dyZXNzO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKHVuZG9uZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBTdGF0dXNUcmFja2VyLnN0YXR1c0xpc3QubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgICAgIFN0YXR1c1RyYWNrZXIuc3RhdHVzID0gUHJvZ3Jlc3NTdGF0ZS5Eb25lO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgXy5yZW1vdmUoU3RhdHVzVHJhY2tlci5zdGF0dXNMaXN0LCBpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5zaWQgPT09IHNpZDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgRGVmYXVsdHMudWlTZXR0aW5ncy5lbGVtZW50VmlzaWJpbGl0eUludGVydmFsKTtcclxuICAgIH07XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
