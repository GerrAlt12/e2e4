export class SelectionManager {
    constructor() {
        this.selectionsList = new Array();
    }
    dispose() {
        this.selectionsList.length = 0;
        delete this.selectionsList;
        delete this.items;
    }
    get itemsSource() {
        return this.items;
    }
    set itemsSource(value) {
        this.items = value;
    }
    processSelection(item, selected) {
        item.selected = selected;
        if (item.onSelectionChanged !== undefined) {
            item.onSelectionChanged(selected);
        }
        if (selected === true && item.onSelected !== undefined) {
            item.onSelected();
        }
        if (selected === false && item.onDeselected !== undefined) {
            item.onDeselected();
        }
    }
    deselectItem(selectionTuple, recursive = false) {
        const index = this.selectionsList.findIndex(selectedItem => (selectedItem.item === selectionTuple.item));
        if (index !== -1) {
            this.selectionsList.splice(index, 1);
        }
        this.processSelection(selectionTuple.item, false);
        if (this.canRecurse(recursive, selectionTuple.item)) {
            /* tslint:disable:no-any */
            (selectionTuple.item).selectionManager.deselectAll(true);
        }
        this.lastProcessedIndex = selectionTuple.index;
    }
    selectItem(selectionTuple, savePrevious = false, recursive = false) {
        if (savePrevious) {
            const index = this.selectionsList.findIndex(selectedItem => (selectedItem.item === selectionTuple.item));
            if (index !== -1) {
                this.processSelection(selectionTuple.item, false);
                this.selectionsList.splice(index, 1);
            }
            this.selectionsList.push(selectionTuple);
            this.processSelection(selectionTuple.item, true);
        }
        else {
            const list = this.selectionsList.splice(0, this.selectionsList.length);
            list.forEach(selectedItem => { this.processSelection(selectedItem.item, false); });
            this.selectionsList.push(selectionTuple);
            this.processSelection(selectionTuple.item, true);
        }
        if (this.canRecurse(recursive, selectionTuple.item)) {
            /* tslint:disable:no-any */
            (selectionTuple.item).selectionManager.selectAll(true);
        }
        this.lastProcessedIndex = selectionTuple.index;
    }
    canRecurse(recursive, /* tslint:disable:no-any */ item /* tslint:enable:no-any */) {
        if (recursive && item.selectionManager && item.selectionManager instanceof SelectionManager) {
            return true;
        }
        return false;
    }
    getSelectionTuple(index) {
        return {
            index: index,
            item: this.itemsSource[index]
        };
    }
    deselectAll(recursive = false) {
        const list = this.selectionsList.splice(0, this.selectionsList.length);
        for (let i = 0; i < list.length; i++) {
            const item = list[i].item;
            this.processSelection(item, false);
            if (this.canRecurse(recursive, item)) {
                /* tslint:disable:no-any */
                (item).selectionManager.deselectAll(true);
            }
        }
        this.lastProcessedIndex = null;
    }
    selectAll(recursive = false) {
        this.selectRange(0, this.itemsSource.length - 1, recursive);
    }
    selectRange(fromIndex, toIndex, recursive = false) {
        if (toIndex < 0 || this.itemsSource.length <= toIndex || fromIndex < 0 || this.itemsSource.length <= fromIndex) {
            return;
        }
        const startIndex = Math.min(fromIndex, toIndex);
        const endIndex = Math.max(fromIndex, toIndex);
        this.deselectAll();
        const tempData = new Array();
        for (let i = startIndex; i <= endIndex; i++) {
            const tuple = this.getSelectionTuple(i);
            tempData.push(tuple);
            this.processSelection(tuple.item, true);
            if (this.canRecurse(recursive, tuple.item)) {
                /* tslint:disable:no-any */
                (tuple.item).selectionManager.selectAll(true);
            }
        }
        this.selectionsList.splice(0, this.selectionsList.length, ...tempData);
        this.lastProcessedIndex = endIndex;
    }
    hasSelections() {
        return this.selectionsList.length !== 0;
    }
    isIndexSelected(index) {
        if (index >= 0 && this.itemsSource.length > index) {
            return this.itemsSource[index].selected;
        }
        return false;
    }
    getMinSelectedIndex() {
        let minIndex = null;
        this.selectionsList.forEach(item => {
            minIndex = (minIndex === null || item.index < minIndex) ? item.index : minIndex;
        });
        return minIndex;
    }
    getMaxSelectedIndex() {
        let maxIndex = null;
        this.selectionsList.forEach(item => {
            maxIndex = (maxIndex === null || item.index > maxIndex) ? item.index : maxIndex;
        });
        return maxIndex;
    }
    selectFirst() {
        if (this.itemsSource.length > 0) {
            this.selectItem(this.getSelectionTuple(0));
        }
    }
    selectLast() {
        if (this.itemsSource.length > 0) {
            this.selectItem(this.getSelectionTuple(this.itemsSource.length - 1));
        }
    }
    selectIndex(index, savePrevious = false, recursive = false) {
        if (index >= 0 && this.itemsSource.length > index) {
            this.selectItem(this.getSelectionTuple(index), savePrevious, recursive);
        }
    }
    deselectIndex(index, recursive = false) {
        if (index >= 0 && this.itemsSource.length > index) {
            this.deselectItem(this.getSelectionTuple(index), recursive);
        }
    }
    toggleSelection(index, savePrevious = false, recursive = false) {
        if (index < 0 || this.itemsSource.length <= index) {
            return;
        }
        const tuple = this.getSelectionTuple(index);
        if (this.isIndexSelected(index)) {
            if (this.selectionsList.length === 1 || (this.selectionsList.length > 1 && savePrevious)) {
                this.deselectItem(tuple, recursive);
            }
            else {
                this.selectItem(tuple, savePrevious, recursive);
            }
            return;
        }
        this.selectItem(tuple, savePrevious, recursive);
    }
    getSelections(recursive = false) {
        if (recursive) {
            let result = [];
            for (let i = 0; i < this.selectionsList.length; i++) {
                const item = this.selectionsList[i].item;
                result.push(item);
                if (this.canRecurse(recursive, item)) {
                    /* tslint:disable:no-any */
                    result = result.concat((item).selectionManager.getSelections(true));
                }
            }
        }
        return this.selectionsList.map((selectable) => selectable.item);
    }
}

//# sourceMappingURL=data:application/json;base64,
