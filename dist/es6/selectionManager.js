export class SelectionManager {
    constructor() {
        this.selectionsList = new Array();
    }
    dispose() {
        this.selectionsList.length = 0;
        this.lastProcessedIndex = null;
        delete this.items;
    }
    get itemsSource() {
        return this.items;
    }
    set itemsSource(value) {
        this.items = value;
        this.checkSelection();
    }
    processSelection(item, selected) {
        const initialSelectState = item.selected;
        item.selected = selected;
        if (item.onSelectionChanged !== undefined && initialSelectState !== selected) {
            item.onSelectionChanged(selected);
        }
        if (selected === true && item.onSelected !== undefined && initialSelectState !== selected) {
            item.onSelected();
        }
        if (selected === false && item.onDeselected !== undefined && initialSelectState !== selected) {
            item.onDeselected();
        }
    }
    deselectItem(selectionTuple) {
        const index = this.selectionsList.findIndex(selectedItem => (selectedItem.item === selectionTuple.item));
        if (index !== -1) {
            this.selectionsList.splice(index, 1);
        }
        this.processSelection(selectionTuple.item, false);
        this.lastProcessedIndex = selectionTuple.index;
    }
    selectItem(selectionTuple, savePrevious = false) {
        if (savePrevious) {
            const index = this.selectionsList.findIndex(selectedItem => (selectedItem.item === selectionTuple.item));
            if (index !== -1) {
                this.processSelection(selectionTuple.item, false);
                this.selectionsList.splice(index, 1);
            }
            this.selectionsList.push(selectionTuple);
            this.processSelection(selectionTuple.item, true);
        }
        else {
            const list = this.selectionsList.splice(0, this.selectionsList.length);
            list.forEach(selectedItem => { this.processSelection(selectedItem.item, false); });
            this.selectionsList.push(selectionTuple);
            this.processSelection(selectionTuple.item, true);
        }
        this.lastProcessedIndex = selectionTuple.index;
    }
    getSelectionTuple(index) {
        return {
            index: index,
            item: this.itemsSource[index]
        };
    }
    checkSelection() {
        for (let i = this.selectionsList.length - 1; i >= 0; i--) {
            const tuple = this.selectionsList[i];
            if (this.itemsSource[tuple.index] !== tuple.item) {
                this.deselectItem(tuple);
            }
        }
    }
    deselectAll() {
        const list = this.selectionsList.splice(0, this.selectionsList.length);
        for (let i = 0; i < list.length; i++) {
            const item = list[i].item;
            this.processSelection(item, false);
        }
        this.lastProcessedIndex = null;
    }
    selectAll() {
        this.selectRange(0, this.itemsSource.length - 1);
    }
    selectRange(fromIndex, toIndex) {
        if (toIndex < 0 || this.itemsSource.length <= toIndex || fromIndex < 0 || this.itemsSource.length <= fromIndex) {
            return;
        }
        const startIndex = Math.min(fromIndex, toIndex);
        const endIndex = Math.max(fromIndex, toIndex);
        this.deselectAll();
        const tempData = new Array();
        for (let i = startIndex; i <= endIndex; i++) {
            const tuple = this.getSelectionTuple(i);
            tempData.push(tuple);
            this.processSelection(tuple.item, true);
        }
        this.selectionsList.splice(0, this.selectionsList.length, ...tempData);
        this.lastProcessedIndex = endIndex;
    }
    hasSelections() {
        return this.selectionsList.length !== 0;
    }
    isIndexSelected(index) {
        if (index >= 0 && this.itemsSource.length > index) {
            return this.itemsSource[index].selected;
        }
        return false;
    }
    getItemIndex(item) {
        return this.itemsSource.findIndex(value => value === item);
    }
    getMinSelectedIndex() {
        let minIndex = null;
        this.selectionsList.forEach(item => {
            minIndex = (minIndex === null || item.index < minIndex) ? item.index : minIndex;
        });
        return minIndex;
    }
    getMaxSelectedIndex() {
        let maxIndex = null;
        this.selectionsList.forEach(item => {
            maxIndex = (maxIndex === null || item.index > maxIndex) ? item.index : maxIndex;
        });
        return maxIndex;
    }
    selectFirst() {
        if (this.itemsSource.length > 0) {
            this.selectItem(this.getSelectionTuple(0));
        }
    }
    selectLast() {
        if (this.itemsSource.length > 0) {
            this.selectItem(this.getSelectionTuple(this.itemsSource.length - 1));
        }
    }
    selectIndex(index, savePrevious = false) {
        if (index >= 0 && this.itemsSource.length > index) {
            this.selectItem(this.getSelectionTuple(index), savePrevious);
        }
    }
    deselectIndex(index) {
        if (index >= 0 && this.itemsSource.length > index) {
            this.deselectItem(this.getSelectionTuple(index));
        }
    }
    toggleSelection(index, savePrevious = false) {
        if (index < 0 || this.itemsSource.length <= index) {
            return;
        }
        const tuple = this.getSelectionTuple(index);
        if (this.isIndexSelected(index)) {
            if (this.selectionsList.length === 1 || (this.selectionsList.length > 1 && savePrevious)) {
                this.deselectItem(tuple);
            }
            else {
                this.selectItem(tuple, savePrevious);
            }
            return;
        }
        this.selectItem(tuple, savePrevious);
    }
    getSelections() {
        return this.selectionsList.map((selectable) => selectable.item);
    }
}

//# sourceMappingURL=data:application/json;base64,
