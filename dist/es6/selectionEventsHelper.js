import { KeyCodes } from './common/keyCodes';
import { MouseButtons } from './common/MouseButtons';
export class SelectionEventsHelper {
    constructor(selectionConfig) {
        this.selectionConfig = selectionConfig;
    }
    trySelectAll(browserEvent) {
        if (browserEvent.ctrlKey) {
            this.selectionConfig.selectionManager.selectAll();
            browserEvent.stopPropagation();
            browserEvent.preventDefault();
        }
    }
    onArrowUp(browserEvent, allowMultipleSelection) {
        if (browserEvent.ctrlKey) {
            this.selectionConfig.selectionManager.selectFirst();
            browserEvent.stopPropagation();
            browserEvent.preventDefault();
        }
        else if (this.selectionConfig.selectionManager.lastProcessedIndex === null || this.selectionConfig.selectionManager.lastProcessedIndex === undefined) {
            this.selectionConfig.selectionManager.selectFirst();
            browserEvent.stopPropagation();
            browserEvent.preventDefault();
        }
        else if (browserEvent.shiftKey && false === this.selectionConfig.selectionManager.isIndexSelected(this.selectionConfig.selectionManager.lastProcessedIndex)) {
            this.selectionConfig.selectionManager.selectRange(this.selectionConfig.selectionManager.lastProcessedIndex, this.selectionConfig.selectionManager.lastProcessedIndex - 1);
        }
        else if (this.selectionConfig.selectionManager.lastProcessedIndex > 0) {
            if (this.selectionConfig.selectionManager.isIndexSelected(this.selectionConfig.selectionManager.lastProcessedIndex - 1)) {
                this.selectionConfig.selectionManager.deselectIndex(this.selectionConfig.selectionManager.lastProcessedIndex);
            }
            this.selectionConfig.selectionManager.selectIndex(this.selectionConfig.selectionManager.lastProcessedIndex - 1, browserEvent.shiftKey && allowMultipleSelection);
            browserEvent.stopPropagation();
            browserEvent.preventDefault();
        }
    }
    onArrowDown(browserEvent, allowMultipleSelection) {
        if (browserEvent.ctrlKey) {
            this.selectionConfig.selectionManager.selectLast();
            browserEvent.stopPropagation();
            browserEvent.preventDefault();
        }
        else if (this.selectionConfig.selectionManager.lastProcessedIndex === null || this.selectionConfig.selectionManager.lastProcessedIndex === undefined) {
            this.selectionConfig.selectionManager.selectFirst();
            browserEvent.stopPropagation();
            browserEvent.preventDefault();
        }
        else if (browserEvent.shiftKey && false === this.selectionConfig.selectionManager.isIndexSelected(this.selectionConfig.selectionManager.lastProcessedIndex)) {
            this.selectionConfig.selectionManager.selectRange(this.selectionConfig.selectionManager.lastProcessedIndex, this.selectionConfig.selectionManager.lastProcessedIndex + 1);
        }
        else {
            if (this.selectionConfig.selectionManager.isIndexSelected(this.selectionConfig.selectionManager.lastProcessedIndex + 1)) {
                this.selectionConfig.selectionManager.deselectIndex(this.selectionConfig.selectionManager.lastProcessedIndex);
            }
            this.selectionConfig.selectionManager.selectIndex(this.selectionConfig.selectionManager.lastProcessedIndex + 1, browserEvent.shiftKey && allowMultipleSelection);
            browserEvent.stopPropagation();
            browserEvent.preventDefault();
        }
    }
    keyboardHandler(browserEvent, allowMultipleSelection) {
        switch (browserEvent.keyCode) {
            case KeyCodes.ArrowUp:
                this.onArrowUp(browserEvent, allowMultipleSelection);
                break;
            case KeyCodes.ArrowDown:
                this.onArrowDown(browserEvent, allowMultipleSelection);
                break;
            case KeyCodes.A:
                this.trySelectAll(browserEvent);
                break;
            default:
                break;
        }
    }
    mouseHandler(browserEvent, itemIndex, item) {
        if (itemIndex === null || itemIndex === undefined) {
            itemIndex = this.selectionConfig.selectionManager.getItemIndex(item);
            if (itemIndex === -1) {
                return;
            }
        }
        const isItemSelected = this.selectionConfig.selectionManager.isIndexSelected(itemIndex);
        if (isItemSelected === false || browserEvent.which === MouseButtons.Left) {
            if (this.selectionConfig.toggleOnly) {
                this.selectionConfig.selectionManager.toggleSelection(itemIndex, true);
                setTimeout(this.clearWindowSelection, 0);
                return;
            }
        }
        if (isItemSelected === false || browserEvent.which === MouseButtons.Left) {
            if (browserEvent.ctrlKey && this.selectionConfig.allowMultipleSelection) {
                this.selectionConfig.selectionManager.toggleSelection(itemIndex, true);
            }
            else if (browserEvent.shiftKey && this.selectionConfig.allowMultipleSelection) {
                const minIndex = this.selectionConfig.selectionManager.getMinSelectedIndex();
                this.selectionConfig.selectionManager.selectRange(minIndex === null ? itemIndex : minIndex, itemIndex);
            }
            else {
                this.selectionConfig.selectionManager.toggleSelection(itemIndex, false);
            }
            setTimeout(this.clearWindowSelection, 0);
        }
    }
    clearWindowSelection() {
        try {
            if (window.getSelection) {
                window.getSelection().removeAllRanges();
            }
            else if (document.hasOwnProperty('selection')) {
                /* tslint:disable:no-string-literal */
                document['selection'].empty();
            }
        }
        catch (e) {
        }
    }
}

//# sourceMappingURL=data:application/json;base64,
