import { Defaults } from './common/defaults';
import { Utility } from './common/utility';
import { SelectionManager } from './selectionManager';
import { FilterManager } from './filterManager';
import { ProgressState } from './common/progressState';
import { SortManager } from './sortManager';
export class ListComponent {
    constructor(stateManager) {
        this.disposed = false;
        this.inited = false;
        this.state = null;
        ///IList
        this.items = [];
        this.totalCount = 0;
        this.loadedCount = 0;
        ///IRequestCanceller
        ///IComponentWithState
        this.useModelState = true;
        this.stateManager = stateManager;
        SelectionManager.includeIn(this, 'items');
        FilterManager.includeIn(this);
        SortManager.includeIn(this);
        this.filterManager.registerFilterTarget(this.sortManager);
        this.listLoadDataSuccessBinded = this.listLoadDataSuccessCallback.bind(this);
        this.listLoadDataFailBinded = this.listLoadDataFailCallback.bind(this);
    }
    listLoadDataSuccessCallback(result) {
        this.loadedCount = result[Defaults.listComponent.loadedCountParameterName];
        this.totalCount = result[Defaults.listComponent.totalCountParameterName] || 0;
        this.state = ProgressState.Done;
        return result;
    }
    listLoadDataFailCallback() {
        this.state = ProgressState.Fail;
    }
    clearDataInternal() {
        this.totalCount = 0;
        this.selectionManager.deselectAll();
        Utility.disposeAll(this.items);
    }
    get busy() {
        return this.state === ProgressState.Progress;
    }
    get ready() {
        return this.state !== ProgressState.Progress;
    }
    ///IComponent overrides
    init(queryParams) {
        this.inited = true;
        const restoredState = this.getRestoredState(queryParams);
        this.filterManager.parseParams(restoredState);
    }
    dispose() {
        this.disposed = true;
        delete this.listLoadDataSuccessBinded;
        delete this.listLoadDataFailBinded;
        this.clearDataInternal();
        this.sortManager.dispose();
        this.filterManager.dispose();
        this.selectionManager.dispose();
    }
    ///IComponent overrides
    onSortChangesCompleted() {
        if (this.ready) {
            this.clearDataInternal();
            this.loadData();
        }
    }
    toRequest() {
        return this.filterManager.buildRequest(null);
    }
    getLocalState() {
        return this.filterManager.buildPersistedState(null);
    }
    loadData() {
        if (!this.inited) {
            throw new Error('loadData can be called only after activation.');
        }
        this.totalCount = 0;
        this.state = ProgressState.Progress;
        const promise = this.getDataReadPromise();
        this.addToCancellationSequence(promise);
        promise.then(this.listLoadDataSuccessBinded, this.listLoadDataFailBinded);
        if (this.useModelState) {
            this.saveRequestState();
            this.saveLocalState();
        }
        return promise;
    }
    clearData() {
        this.clearDataInternal();
    }
    reloadData() {
        if (this.ready) {
            this.clearData();
            this.loadData();
        }
    }
    ///IList
    ///IRequestCanceller
    addToCancellationSequence(promise) { }
    ;
    cancelRequests() { }
    ;
    saveRequestState() {
        this.stateManager.flushRequestState(this.toRequest());
    }
    ;
    saveLocalState() {
        this.stateManager.persistLocalState(this.getLocalState());
    }
    ;
    getRestoredState(params) {
        if (this.useModelState === false) {
            return params;
        }
        return this.stateManager.mergeStates(params);
    }
}

//# sourceMappingURL=data:application/json;base64,
