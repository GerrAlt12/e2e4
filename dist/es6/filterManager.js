import * as _ from 'lodash';
export class FilterManager {
    constructor(target) {
        this.defaultsApplied = false;
        this.appliedFiltersMap = new Map();
        this.registerFilterTarget(target);
    }
    static registerFilter(targetType, propertyConfig) {
        const typeConfigs = FilterManager.filterPropertiesMap.has(targetType) ? FilterManager.filterPropertiesMap.get(targetType) : new Array();
        typeConfigs.push(propertyConfig);
        FilterManager.filterPropertiesMap.set(targetType, typeConfigs);
    }
    static coerceValue(value) {
        if (typeof value === 'object' || Array.isArray(value)) {
            for (let index in value) {
                if (value.hasOwnProperty(index)) {
                    value[index] = FilterManager.coerceValue(value[index]);
                }
            }
        }
        else if (value && !isNaN(value)) {
            value = +value;
        }
        else if (value === 'undefined') {
            value = undefined;
        }
        else if (FilterManager.coerceTypes[value] !== undefined) {
            value = FilterManager.coerceTypes[value];
        }
        return value;
    }
    static buildFilterValue(target, value, config) {
        if (config && config.valueSerializer) {
            return config.valueSerializer.call(target, value);
        }
        value = config && config.emptyIsNull ? value || null : value;
        if (value && value.toRequest) {
            return value.toRequest();
        }
        if (Array.isArray(value)) {
            const temp = [];
            for (let i = 0; i < value.length; i++) {
                temp[i] = FilterManager.buildFilterValue(target, value[i], null);
            }
            return temp;
        }
        return value;
    }
    dispose() {
        this.appliedFiltersMap.clear();
        delete this.appliedFiltersMap;
    }
    resetFilters() {
        this.appliedFiltersMap.forEach((targetConfig, target) => {
            for (let i = 0; i < targetConfig.length; i++) {
                const config = targetConfig[i];
                const defaultValue = (typeof config.defaultValue === 'function') ? config.defaultValue.call(target) : config.defaultValue;
                const clonedObject = _.cloneDeep({ defaultValue: defaultValue });
                target[config.propertyName] = clonedObject.defaultValue;
            }
        });
    }
    parseParams(params) {
        this.appliedFiltersMap.forEach((targetConfig, target) => {
            for (let i = 0; i < targetConfig.length; i++) {
                const config = targetConfig[i];
                if (false === this.defaultsApplied && config.defaultValue === undefined) {
                    config.defaultValue = _.cloneDeep({ defaultValue: target[config.propertyName] }).defaultValue;
                }
                if (params && params[config.parameterName] !== undefined && false === config.ignoreOnAutoMap) {
                    let proposedVal = config.emptyIsNull ? params[config.parameterName] || null : params[config.parameterName];
                    proposedVal = config.coerce ? FilterManager.coerceValue(proposedVal) : proposedVal;
                    target[config.propertyName] = config.valueParser ? config.valueParser.call(target, proposedVal, params) : proposedVal;
                }
            }
        });
        this.defaultsApplied = true;
    }
    buildRequest(result) {
        result = result || {};
        this.appliedFiltersMap.forEach((targetConfig, target) => {
            for (let i = 0; i < targetConfig.length; i++) {
                const config = targetConfig[i];
                const proposedVal = target[config.propertyName];
                result[config.parameterName] = FilterManager.buildFilterValue(target, proposedVal, config);
            }
        });
        return result;
    }
    buildPersistedState(result) {
        result = result || {};
        this.appliedFiltersMap.forEach((targetConfig, target) => {
            for (let i = 0; i < targetConfig.length; i++) {
                const config = targetConfig[i];
                if (!config.persisted) {
                    continue;
                }
                let proposedVal = target[config.propertyName];
                if (proposedVal && proposedVal.toRequest) {
                    proposedVal = proposedVal.toRequest();
                }
                result[config.parameterName] = config.valueSerializer
                    ? config.valueSerializer.call(target, proposedVal) : (config.emptyIsNull ? proposedVal || null : proposedVal);
            }
        });
        return result;
    }
    registerFilterTarget(target) {
        let targetConfig = this.appliedFiltersMap.has(target) ? this.appliedFiltersMap.get(target) : new Array();
        FilterManager.filterPropertiesMap.forEach((typeConfig, type) => {
            if (target instanceof type) {
                targetConfig = targetConfig.concat(_.cloneDeep(typeConfig));
            }
        });
        if (targetConfig.length > 0) {
            this.appliedFiltersMap.set(target, targetConfig);
        }
        else {
            this.appliedFiltersMap.delete(target);
        }
    }
}
FilterManager.coerceTypes = { 'true': !0, 'false': !1, 'null': null };
FilterManager.filterPropertiesMap = new Map();

//# sourceMappingURL=data:application/json;base64,
