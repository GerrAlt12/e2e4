import * as _ from 'lodash';
export class FilterManager {
    constructor(target) {
        this.defaultsApplied = false;
        this.appliedFiltersMap = new Map();
        this.registerFilterTarget(target);
    }
    static registerFilter(targetType, propertyConfig) {
        const typeConfigs = FilterManager.filterPropertiesMap.has(targetType) ? FilterManager.filterPropertiesMap.get(targetType) : new Array();
        typeConfigs.push(propertyConfig);
        FilterManager.filterPropertiesMap.set(targetType, typeConfigs);
    }
    static coerceValue(value) {
        if (typeof value === 'object' || Array.isArray(value)) {
            for (let index in value) {
                if (value.hasOwnProperty(index)) {
                    value[index] = FilterManager.coerceValue(value[index]);
                }
            }
        }
        else if (value && !isNaN(value)) {
            value = +value;
        }
        else if (value === 'undefined') {
            value = undefined;
        }
        else if (FilterManager.coerceTypes[value] !== undefined) {
            value = FilterManager.coerceTypes[value];
        }
        return value;
    }
    static buildFilterValue(target, value, config) {
        if (config && config.serializeFormatter) {
            return config.serializeFormatter.call(target, value);
        }
        value = config && config.emptyIsNull ? value || null : value;
        if (value && value.toRequest) {
            return value.toRequest();
        }
        if (Array.isArray(value)) {
            const temp = [];
            for (let i = 0; i < value.length; i++) {
                temp[i] = FilterManager.buildFilterValue(target, value[i], null);
            }
            return temp;
        }
        return value;
    }
    dispose() {
        this.appliedFiltersMap.clear();
        delete this.appliedFiltersMap;
    }
    resetValues() {
        this.appliedFiltersMap.forEach((targetConfig, target) => {
            for (let i = 0; i < targetConfig.length; i++) {
                const config = targetConfig[i];
                const defaultValue = (typeof config.defaultValue === 'function') ? config.defaultValue.call(target) : config.defaultValue;
                const clonedObject = _.cloneDeep({ defaultValue: defaultValue });
                target[config.propertyName] = clonedObject.defaultValue;
            }
        });
    }
    parseParams(params) {
        this.appliedFiltersMap.forEach((targetConfig, target) => {
            for (let i = 0; i < targetConfig.length; i++) {
                const config = targetConfig[i];
                if (false === this.defaultsApplied && config.defaultValue === undefined) {
                    config.defaultValue = _.cloneDeep({ defaultValue: target[config.propertyName] }).defaultValue;
                }
                if (params && params[config.parameterName] !== undefined && false === config.ignoreOnAutoMap) {
                    let proposedVal = config.emptyIsNull ? params[config.parameterName] || null : params[config.parameterName];
                    proposedVal = config.coerce ? FilterManager.coerceValue(proposedVal) : proposedVal;
                    target[config.propertyName] = config.parseFormatter ? config.parseFormatter.call(target, proposedVal, params) : proposedVal;
                }
            }
        });
        this.defaultsApplied = true;
    }
    getRequestState(result) {
        result = result || {};
        this.appliedFiltersMap.forEach((targetConfig, target) => {
            for (let i = 0; i < targetConfig.length; i++) {
                const config = targetConfig[i];
                const proposedVal = target[config.propertyName];
                result[config.parameterName] = FilterManager.buildFilterValue(target, proposedVal, config);
            }
        });
        return result;
    }
    getPersistedState(result) {
        result = result || {};
        this.appliedFiltersMap.forEach((targetConfig, target) => {
            for (let i = 0; i < targetConfig.length; i++) {
                const config = targetConfig[i];
                if (!config.persisted) {
                    continue;
                }
                let proposedVal = target[config.propertyName];
                if (proposedVal && proposedVal.toRequest) {
                    proposedVal = proposedVal.toRequest();
                }
                result[config.parameterName] = config.serializeFormatter
                    ? config.serializeFormatter.call(target, proposedVal) : (config.emptyIsNull ? proposedVal || null : proposedVal);
            }
        });
        return result;
    }
    registerFilterTarget(target) {
        let targetConfig = this.appliedFiltersMap.has(target) ? this.appliedFiltersMap.get(target) : new Array();
        FilterManager.filterPropertiesMap.forEach((typeConfig, type) => {
            if (target instanceof type) {
                targetConfig = targetConfig.concat(_.cloneDeep(typeConfig));
            }
        });
        if (targetConfig.length > 0) {
            this.appliedFiltersMap.set(target, targetConfig);
        }
        else {
            this.appliedFiltersMap.delete(target);
        }
    }
}
FilterManager.coerceTypes = { 'true': !0, 'false': !1, 'null': null };
FilterManager.filterPropertiesMap = new Map();

//# sourceMappingURL=data:application/json;base64,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QztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMxQyxDQUFDO0lBQ0wsQ0FBQztBQUlMLENBQUM7QUExSFUseUJBQVcsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDO0FBQ3hELGlDQUFtQixHQUFHLElBQUksR0FBRyxFQUE0QixDQXlIbkUiLCJmaWxlIjoiZmlsdGVyTWFuYWdlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcclxuaW1wb3J0IHtGaWx0ZXJDb25maWd9IGZyb20gJy4vZmlsdGVyQ29uZmlnJztcclxuaW1wb3J0IHtJRmlsdGVyTWFuYWdlcn0gZnJvbSAnLi9jb250cmFjdHMvSUZpbHRlck1hbmFnZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZpbHRlck1hbmFnZXIgaW1wbGVtZW50cyBJRmlsdGVyTWFuYWdlciB7XHJcbiAgICBzdGF0aWMgY29lcmNlVHlwZXMgPSB7ICd0cnVlJzogITAsICdmYWxzZSc6ICExLCAnbnVsbCc6IG51bGwgfTtcclxuICAgIHN0YXRpYyBmaWx0ZXJQcm9wZXJ0aWVzTWFwID0gbmV3IE1hcDxhbnksIEFycmF5PEZpbHRlckNvbmZpZz4+KCk7XHJcbiAgICBzdGF0aWMgcmVnaXN0ZXJGaWx0ZXIodGFyZ2V0VHlwZTogT2JqZWN0LCBwcm9wZXJ0eUNvbmZpZzogRmlsdGVyQ29uZmlnKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgdHlwZUNvbmZpZ3MgPSBGaWx0ZXJNYW5hZ2VyLmZpbHRlclByb3BlcnRpZXNNYXAuaGFzKHRhcmdldFR5cGUpID8gRmlsdGVyTWFuYWdlci5maWx0ZXJQcm9wZXJ0aWVzTWFwLmdldCh0YXJnZXRUeXBlKSA6IG5ldyBBcnJheTxGaWx0ZXJDb25maWc+KCk7XHJcbiAgICAgICAgdHlwZUNvbmZpZ3MucHVzaChwcm9wZXJ0eUNvbmZpZyk7XHJcbiAgICAgICAgRmlsdGVyTWFuYWdlci5maWx0ZXJQcm9wZXJ0aWVzTWFwLnNldCh0YXJnZXRUeXBlLCB0eXBlQ29uZmlncyk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgY29lcmNlVmFsdWUodmFsdWU6IGFueSk6IE9iamVjdCB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggaW4gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eShpbmRleCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVtpbmRleF0gPSBGaWx0ZXJNYW5hZ2VyLmNvZXJjZVZhbHVlKHZhbHVlW2luZGV4XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlICYmICFpc05hTih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSArdmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfSBlbHNlIGlmIChGaWx0ZXJNYW5hZ2VyLmNvZXJjZVR5cGVzW3ZhbHVlXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gRmlsdGVyTWFuYWdlci5jb2VyY2VUeXBlc1t2YWx1ZV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBidWlsZEZpbHRlclZhbHVlKHRhcmdldDogT2JqZWN0LCB2YWx1ZTogYW55LCBjb25maWc6IEZpbHRlckNvbmZpZyk6IE9iamVjdCB7XHJcbiAgICAgICAgaWYgKGNvbmZpZyAmJiBjb25maWcuc2VyaWFsaXplRm9ybWF0dGVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb25maWcuc2VyaWFsaXplRm9ybWF0dGVyLmNhbGwodGFyZ2V0LCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YWx1ZSA9IGNvbmZpZyAmJiBjb25maWcuZW1wdHlJc051bGwgPyB2YWx1ZSB8fCBudWxsIDogdmFsdWU7XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS50b1JlcXVlc3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvUmVxdWVzdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgY29uc3QgdGVtcCA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wW2ldID0gRmlsdGVyTWFuYWdlci5idWlsZEZpbHRlclZhbHVlKHRhcmdldCwgdmFsdWVbaV0sIG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0ZW1wO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBkZWZhdWx0c0FwcGxpZWQgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgYXBwbGllZEZpbHRlcnNNYXAgPSBuZXcgTWFwPE9iamVjdCwgQXJyYXk8RmlsdGVyQ29uZmlnPj4oKTtcclxuXHJcbiAgICBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYXBwbGllZEZpbHRlcnNNYXAuY2xlYXIoKTtcclxuICAgICAgICBkZWxldGUgdGhpcy5hcHBsaWVkRmlsdGVyc01hcDtcclxuICAgIH1cclxuICAgIHJlc2V0VmFsdWVzKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYXBwbGllZEZpbHRlcnNNYXAuZm9yRWFjaCgodGFyZ2V0Q29uZmlnLCB0YXJnZXQpID0+IHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YXJnZXRDb25maWcubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHRhcmdldENvbmZpZ1tpXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9ICh0eXBlb2YgY29uZmlnLmRlZmF1bHRWYWx1ZSA9PT0gJ2Z1bmN0aW9uJykgPyAoY29uZmlnLmRlZmF1bHRWYWx1ZSBhcyBGdW5jdGlvbikuY2FsbCh0YXJnZXQpIDogY29uZmlnLmRlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNsb25lZE9iamVjdCA9IF8uY2xvbmVEZWVwKHsgZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWUgfSk7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRbY29uZmlnLnByb3BlcnR5TmFtZV0gPSBjbG9uZWRPYmplY3QuZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwYXJzZVBhcmFtcyhwYXJhbXM6IE9iamVjdCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYXBwbGllZEZpbHRlcnNNYXAuZm9yRWFjaCgodGFyZ2V0Q29uZmlnLCB0YXJnZXQpID0+IHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YXJnZXRDb25maWcubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHRhcmdldENvbmZpZ1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChmYWxzZSA9PT0gdGhpcy5kZWZhdWx0c0FwcGxpZWQgJiYgY29uZmlnLmRlZmF1bHRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLmRlZmF1bHRWYWx1ZSA9IF8uY2xvbmVEZWVwKHsgZGVmYXVsdFZhbHVlOiB0YXJnZXRbY29uZmlnLnByb3BlcnR5TmFtZV0gfSkuZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zW2NvbmZpZy5wYXJhbWV0ZXJOYW1lXSAhPT0gdW5kZWZpbmVkICYmIGZhbHNlID09PSBjb25maWcuaWdub3JlT25BdXRvTWFwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByb3Bvc2VkVmFsID0gY29uZmlnLmVtcHR5SXNOdWxsID8gcGFyYW1zW2NvbmZpZy5wYXJhbWV0ZXJOYW1lXSB8fCBudWxsIDogcGFyYW1zW2NvbmZpZy5wYXJhbWV0ZXJOYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wb3NlZFZhbCA9IGNvbmZpZy5jb2VyY2UgPyBGaWx0ZXJNYW5hZ2VyLmNvZXJjZVZhbHVlKHByb3Bvc2VkVmFsKSA6IHByb3Bvc2VkVmFsO1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtjb25maWcucHJvcGVydHlOYW1lXSA9IGNvbmZpZy5wYXJzZUZvcm1hdHRlciA/IGNvbmZpZy5wYXJzZUZvcm1hdHRlci5jYWxsKHRhcmdldCwgcHJvcG9zZWRWYWwsIHBhcmFtcykgOiBwcm9wb3NlZFZhbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdHNBcHBsaWVkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGdldFJlcXVlc3RTdGF0ZShyZXN1bHQ/OiBPYmplY3QpOiBPYmplY3Qge1xyXG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCB8fCB7fTtcclxuICAgICAgICB0aGlzLmFwcGxpZWRGaWx0ZXJzTWFwLmZvckVhY2goKHRhcmdldENvbmZpZywgdGFyZ2V0KSA9PiB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFyZ2V0Q29uZmlnLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb25maWcgPSB0YXJnZXRDb25maWdbaV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wb3NlZFZhbCA9IHRhcmdldFtjb25maWcucHJvcGVydHlOYW1lXTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdFtjb25maWcucGFyYW1ldGVyTmFtZV0gPSBGaWx0ZXJNYW5hZ2VyLmJ1aWxkRmlsdGVyVmFsdWUodGFyZ2V0LCBwcm9wb3NlZFZhbCwgY29uZmlnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBnZXRQZXJzaXN0ZWRTdGF0ZShyZXN1bHQ/OiBPYmplY3QpOiBPYmplY3Qge1xyXG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCB8fCB7fTtcclxuICAgICAgICB0aGlzLmFwcGxpZWRGaWx0ZXJzTWFwLmZvckVhY2goKHRhcmdldENvbmZpZywgdGFyZ2V0KSA9PiB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFyZ2V0Q29uZmlnLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb25maWcgPSB0YXJnZXRDb25maWdbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNvbmZpZy5wZXJzaXN0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBwcm9wb3NlZFZhbCA9IHRhcmdldFtjb25maWcucHJvcGVydHlOYW1lXTtcclxuICAgICAgICAgICAgICAgIGlmIChwcm9wb3NlZFZhbCAmJiBwcm9wb3NlZFZhbC50b1JlcXVlc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wb3NlZFZhbCA9IHByb3Bvc2VkVmFsLnRvUmVxdWVzdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzdWx0W2NvbmZpZy5wYXJhbWV0ZXJOYW1lXSA9IGNvbmZpZy5zZXJpYWxpemVGb3JtYXR0ZXJcclxuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZy5zZXJpYWxpemVGb3JtYXR0ZXIuY2FsbCh0YXJnZXQsIHByb3Bvc2VkVmFsKSA6IChjb25maWcuZW1wdHlJc051bGwgPyBwcm9wb3NlZFZhbCB8fCBudWxsIDogcHJvcG9zZWRWYWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIHJlZ2lzdGVyRmlsdGVyVGFyZ2V0KHRhcmdldDogT2JqZWN0KTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHRhcmdldENvbmZpZyA9IHRoaXMuYXBwbGllZEZpbHRlcnNNYXAuaGFzKHRhcmdldCkgPyB0aGlzLmFwcGxpZWRGaWx0ZXJzTWFwLmdldCh0YXJnZXQpIDogbmV3IEFycmF5PEZpbHRlckNvbmZpZz4oKTtcclxuICAgICAgICBGaWx0ZXJNYW5hZ2VyLmZpbHRlclByb3BlcnRpZXNNYXAuZm9yRWFjaCgodHlwZUNvbmZpZywgdHlwZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgdHlwZSkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0Q29uZmlnID0gdGFyZ2V0Q29uZmlnLmNvbmNhdChfLmNsb25lRGVlcCh0eXBlQ29uZmlnKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAodGFyZ2V0Q29uZmlnLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5hcHBsaWVkRmlsdGVyc01hcC5zZXQodGFyZ2V0LCB0YXJnZXRDb25maWcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwbGllZEZpbHRlcnNNYXAuZGVsZXRlKHRhcmdldCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3RydWN0b3IodGFyZ2V0OiBPYmplY3QpIHtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyRmlsdGVyVGFyZ2V0KHRhcmdldCk7XHJcbiAgICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
