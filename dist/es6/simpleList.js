import { Defaults } from './common/defaults';
import { Utility } from './common/utility';
import { FilterManager } from './filterManager';
import { ProgressState } from './common/progressState';
export class SimpleList {
    constructor(stateManager, pager) {
        this.disposed = false;
        this.inited = false;
        this.state = ProgressState.Initial;
        ///IList
        this.items = [];
        ///IRequestCanceller
        ///IObjectWithState
        this.useModelState = true;
        this.stateManager = stateManager;
        this.pager = pager;
        this.filterManager = new FilterManager(this);
        this.filterManager.registerFilterTarget(this.pager);
        this.listLoadDataSuccessBinded = this.listLoadDataSuccessCallback.bind(this);
        this.listLoadDataFailBinded = this.listLoadDataFailCallback.bind(this);
    }
    listLoadDataSuccessCallback(result) {
        this.pager.processResponse(result);
        this.state = ProgressState.Done;
        // In case when filter changed from last request and theres no data now
        if ((result[Defaults.listSettings.totalCountParameterName] || 0) === 0) {
            this.clearData();
        }
        return result;
    }
    listLoadDataFailCallback() {
        this.state = ProgressState.Fail;
    }
    clearDataInternal() {
        this.pager.totalCount = 0;
        Utility.disposeAll(this.items);
    }
    get busy() {
        return this.state === ProgressState.Progress;
    }
    get ready() {
        return this.state !== ProgressState.Progress;
    }
    init(queryParams) {
        this.inited = true;
        const restoredState = this.getRestoredState(queryParams);
        this.filterManager.parseParams(restoredState);
    }
    dispose() {
        this.disposed = true;
        delete this.listLoadDataSuccessBinded;
        delete this.listLoadDataFailBinded;
        this.clearDataInternal();
        this.filterManager.dispose();
    }
    onSortChangesCompleted() {
        if (this.ready) {
            this.clearDataInternal();
            this.loadData();
        }
    }
    toRequest() {
        return this.filterManager.buildRequest(null);
    }
    getLocalState() {
        return this.filterManager.buildPersistedState(null);
    }
    loadData() {
        if (!this.inited) {
            throw new Error('loadData can be called only after activation.');
        }
        this.pager.totalCount = 0;
        this.state = ProgressState.Progress;
        const promise = this.getDataReadPromise(this.toRequest());
        this.addToCancellationSequence(promise);
        promise.then(this.listLoadDataSuccessBinded, this.listLoadDataFailBinded);
        if (this.useModelState) {
            this.saveRequestState();
            this.saveLocalState();
        }
        return promise;
    }
    clearData() {
        this.clearDataInternal();
    }
    reloadData() {
        if (this.ready) {
            this.clearData();
            this.loadData();
        }
    }
    ///IList
    ///IRequestCanceller
    addToCancellationSequence(promise) { }
    ;
    cancelRequests() { }
    ;
    saveRequestState() {
        this.stateManager.flushRequestState(this.toRequest());
    }
    ;
    saveLocalState() {
        this.stateManager.persistLocalState(this.getLocalState());
    }
    ;
    getRestoredState(params) {
        if (this.useModelState === false) {
            return params;
        }
        return this.stateManager.mergeStates(params);
    }
}

//# sourceMappingURL=data:application/json;base64,
