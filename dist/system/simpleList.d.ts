import { ProgressState } from './common/progressState';
import { IStateManager } from './contracts/IStateManager';
import { IList } from './contracts/IList';
import { IFilterManager } from './contracts/IFilterManager';
export declare abstract class SimpleList implements IList {
    private listLoadDataSuccessCallback(result);
    private listLoadDataFailCallback();
    private listLoadDataSuccessBinded;
    private listLoadDataFailBinded;
    private clearDataInternal();
    constructor(stateManager: IStateManager);
    disposed: boolean;
    inited: boolean;
    state: ProgressState;
    busy: boolean;
    ready: boolean;
    init(queryParams?: Object): void;
    dispose(): void;
    onSortChangesCompleted(): void;
    items: Object[];
    totalCount: number;
    loadedCount: number;
    toRequest(): any;
    getLocalState(): Object;
    loadData(): Promise<Object>;
    clearData(): void;
    reloadData(): void;
    addToCancellationSequence(promise: Promise<Object>): void;
    cancelRequests(): void;
    useModelState: boolean;
    stateManager: IStateManager;
    saveRequestState(): void;
    saveLocalState(): void;
    private getRestoredState(params);
    filterManager: IFilterManager;
    abstract getDataReadPromise(requestParams: any): Promise<Object>;
}
